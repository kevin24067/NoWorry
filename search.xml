<?xml version="1.0" encoding="utf-8"?>
<search>
  
    
    <entry>
      <title><![CDATA[支付行业常见名词]]></title>
      <url>%2FNoWorry%2F2017%2F04%2F21%2FTERMS%2F</url>
      <content type="text"><![CDATA[注： 偶尔听到看一些支付行业常用名词，更多的是从第三方支付公司角度，或者银联的角度描述 稍微整理一下，并不权威仅供参考 备付金银行是指与支付机构签订协议、提供客户备付金存管服务的境内银行业金融机构，包括备付金存管银行和备付金合作银行。(支付机构客户备付金存管办法) 备付金存管银行指可以为支付机构办理客户备付金的跨行收付业务，并负责对支付机构存放在所有备付金银行的客户备付金信息进行归集、核对与监督的备付金银行。(支付机构客户备付金存管办法) 备付金合作银行指可以为支付机构办理客户备付金的收取和本银行支取业务，并负责对支付机构存放在本银行的客户备付金进行监督的备付金银行。(支付机构客户备付金存管办法) 备付金专用存款账户是指支付机构在备付金银行开立的专户存放客户备付金的活期存款账户，包括备付金存管账户、备付金收付账户和备付金汇缴账户。(支付机构客户备付金存管办法) 备付金存管账户支付机构在备付金银行开立的，可以以现金形式接收客户备付金、以银行转账方式办理客户备付金收取和支取业务的专用存款账户。支付机构在备付金存管授权行或其辖属机构开立的备付金存管账户称为备付金主存管账户。(支付机构客户备付金存管办法) 备付金汇缴账户是支付机构在备付金银行开立的可以以现金形式接收或以本银行资金内部划转方式接收客户备付金的专用存款账户。备付金银行应当于每日营业终了前，将备付金汇缴账户内的资金全额划转至支付机构的备付金存管账户或在同一备付金合作银行开立备付金收付账户。支付机构可以通过备付金汇缴账户将客户备付金直接退回至原资金转出账户。(支付机构客户备付金存管办法) 备付金收付账户是支付机构在备付金合作银行开立的，可以以现金形式或以银行转账方式接收客户备付金、以银行资金内部划转方式办理客户备付金支取业务的专用存款账户。支付机构备付金收付账户应该开立在备付金合作授权行。(支付机构客户备付金存管办法) 备付金协议是指支付机构与备付金银行或其授权的一个境内分支机构签订的，约定双方的权利、义务和责任的协议。该协议应当约定支付机构从备付金银行划转客户备付金的支付指令，以及客户备付金发生损失时双方应当承担的偿付责任和相关偿付方式。(支付机构客户备付金存管办法) 风险准备金专用存款账户是支付机构在备付金存管银行或其授权分支机构开立的专用存款账户，用于支付机构按季计提的风险准备金。(支付机构客户备付金存管办法) 客户备付金是指支付机构为办理客户委托的支付业务而实际收到的预收待付货币资金。(支付机构客户备付金存管办法) 客户备付金日均余额是指备付金存管银行的法人机构根据最近90日内支付机构每日日终的客户备付金总量计算的平均值。(非金融机构支付服务管理办法) 支付机构是指取得《支付业务许可证》,获准办理“预付卡发行与受理”业务的发卡机构和获准办理“预付卡受理”业务的受理机构。(支付机构预付卡业务管理办法)主要出资人：包括拥有申请人实际控制权的出资人和持有申请人10%以上股权的出资人。(非金融机构支付服务管理办法) 支付机构特定自有资金账户是支付机构在备付金存管银行开立的自有资金账户，用于现金形式为客户办理备付金赎回、结转支付业务手续费收入等业务。支付机构只能确定一个特定自有资金账户，并按照规定向我营业管理部备案。(支付机构客户备付金存管办法) 支付账户是指支付机构根据客户申请，为客户开立的具有记录客户资金交易资金余额功能的电子账簿。(支付机构互联网支付业务管理办法(征求意见稿)) 银行卡收单指通过销售点(POS)终端等为银行卡特约商户代收货币资金的行为。(非金融机构支付服务管理办法) 银行卡收单业务是指收单机构与特约商户签订银行卡受理协议，在特约商户按约定受理银行卡并与持卡人达成交易后，为特约商户提供交易资金结算服务的行为。(银行卡收单业务管理办法) 本代本收单：即发卡行与收单行为同一银行，交易不走银联交换网络; 本代他收单：即发卡行与收单行为不同银行，交易必须走银联交换网络; 收单机构包括从事银行卡收单业务的银行业金融机构，获得银行卡收单业务许可、为实体特约商户提供银行卡受理并完成资金结算服务的支付机构，以及获得网络支付业务许可、为网络特约商户提供银行卡受理并完成资金结算服务的支付机构。(银行卡收单业务管理办法) MCC码也称商户类别码。由收单机构为特约商户设置，用于标明银联卡交易环境、所在商户的主营业务范围和行业归属，判断境内跨行交易商户结算手续费标准的主要依据;也是开展银联卡交易行业分析和报告，银联卡业务风险管理和控制的重要基础数据之一。银行卡收单管理办法规定，商户号为15位：机构代码(3位)+地区代码(4位)+商户类型(4位)+商户顺序号(4位)。 特约商户是指与收单机构签订银行卡受理协议、按约定受理银行卡并委托收单机构为其完成交易资金结算的企事业单位、个体工商户或其他组织，以及按照国家工商行政管理机关有关规定，开展网络商品交易等经营活动的自然人。(银行卡收单业务管理办法) 收单机构的特约商户：是指与收单机构签约并同意使用银行卡进行资金结算的法人、个体工商户或其他组织。(支付机构反洗钱和反恐怖融资管理办法) 互联网特约商户：是指基于互联网信息系统直接向消费者销售商品或提供服务，并接受支付机构互联网支付服务完成资金结算的法人、其他组织或自然人。(支付机构互联网支付业务管理办法(征求意见稿)) 实体特约商户：是指通过实体经营场所提供商品或服务的特约商户。网络特约商户，是指基于公共网络信息系统提供商品或服务的特约商户。(银行卡收单业务管理办法) 网络支付是指依托公共网络或专用网络在首付款人之间转移货币资金的行为，包括货币汇兑、互联网支付、移动电话支付、固定电话支付数字电视支付等。(非金融机构支付服务管理办法) 网络支付机构，是指从事《非金融机构支付服务管理办法》规定的网络支付业务的支付机构。(支付机构反洗钱和反恐怖融资管理办法) 网络支付机构的特约商户：是指基于互联网信息系统直接向消费者销售商品或提供服务，并接受网络支付机构互联网支付服务完成资金结算的法人、个体工商户、其他组织或自然人。(支付机构反洗钱和反恐怖融资管理办法) 网络支付接口：是指收单机构与网络特约商户基于约定的业务规则，用于网络支付数据交换的规范和技术实现。(银行卡收单业务管理办法) 预付卡是指以营利为目的发行的、在发行机构之外购买商品或服务的预付价值，包括采取磁条、芯片等技术以卡片、密码等形式发行的预付卡。(非金融机构支付服务管理办法) 预付卡机构，是指从事《非金融机构支付服务管理办法》规定的预付卡发行与受理业务或预付卡受理业务的支付机构。 (支付机构反洗钱和反恐怖融资管理办法) 预付卡机构的特约商户：是指与预付卡机构签约并同意使用预付卡进行资金结算的法人、个体工商户或其他组织。(支付机构反洗钱和反恐怖融资管理办法) 不记名预付卡：是指预付卡业务处理系统中不记载持卡人身份信息的预付卡。(支付机构预付卡业务管理办法) 记名预付卡：是指预付卡业务处理系统中记载持卡人身份信息的预付卡。(支付机构预付卡业务管理办法) NFC支付是指消费者在购买商品或服务时，即时采用NFC技术(Near Field Communication)通过手机等手持设备完成支付，是新兴的一种移动支付方式。支付的处理在现场进行，并且在线下进行，不需要使用移动网络，而是使用NFC射频通道实现与POS收款机或自动售货机等设备的本地通讯。NFC近距离无线通讯是近场支付的主流技术，它是一种短距离的高频无线通讯技术，允许电子设备之间进行非接触式点对点数据传输交换数据。 二维码支付是一种基于账户体系搭起来的新一代无线支付方案。在该支付方案下，商家可把账号、商品价格等交易信息汇编成一个二维码，并印刷在各种报纸、杂志、广告、图书等载体上发布。用户通过手机客户端或者其他扫码设备扫拍二维码，便可实现与商家账户的支付结算。 POS(销售终端)销售终端–POS(point of sale)是一种多功能终端，把它安装在信用卡的特约商户和受理网点中与计算机联成网络，就能实现电子资金自动转账，它具有支持消费、预授权、余额查询和转账等功能，使用起来安全、快捷、可靠。 直连POS：指POS终端直接与银联系统相连接，当发生POS消费时，此交易信息先送至银联主机系统，由银联系统自动判断后直接送相关的发卡银行，然后信息再沿路返回。 间连POS：指POS终端连接到提供机具的商业银行主机系统，当发生跨行银行消费交易时，消费交易信息先送提供机具的商业银行主机系统，判断为跨行信息后送银联主机系统，由银联系统分选判断后再送相关的发卡银行，然后信息再沿路返回。 智能POS：一个基于互联网的商户智能终端,一个帮商户实现智能化,互联网化,大数据化经营的全新POS。拥有融合收款、卡券营销、微商城、消息管理、经营统计分析等多项功能。 mPOS：是新型支付产品，与手机、平板电脑等通用智能移动设备进行连接，通过互联网进行信息传输，外接设备完成卡片读取、PIN输入、数据加解密、提示信息显示等操作，从而实现支付功能的应用 POS一清机：银行或者有收单资质的第三方支付公司直接结算到用户绑定的银行卡。一清，就是指“一次清算”。 POS二清机：指支付公司或银行先将POS机的结算款支付给某一个人或某一家未取得收单资质的公司，再由这家公司或个人结算给商户。 T+0 POS机：是指POS机上的当天所有成功交易，于银当日将POS机结算资金划入指定的结算账户，并收取相关服务费用的特殊结算处理业务。目前市场上比较流行的T+0 POS机均是由支付公司作为垫付方，在当日进行资金垫付，并会相应收取高额的手续费用。 T+1 POS机：就是当日发生的POS机交易均延顺到下一个交易日进行结算，这种结算方式符合了银联对资金结算的方式，安全性、稳定性均有很大保障。 结算指把某一时期内的所有收支情况进行总结、核算。 清分是清算的数据准备阶段, 主要是将当日的全部网络交易数据按照各成员行之间本代他、他代本、贷记、借记、笔数、金额、轧差净额等进行汇总、整理、分类。是指对交易记录汇总分类并计算出相互结算金额的过程。 轧差是指利用抵消、合同更新等法律制度，最终取得一方对另一方的一个数额的净债权或净债务，如市场交易者之间，可能互有内容相同，方向相反的多笔交易，在结算或结束交易时，可以将各方债权在相等数额内抵消，仅支付余额。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[PKI中常用到证书密钥申请文件及其转换]]></title>
      <url>%2FNoWorry%2F2017%2F04%2F19%2FPKI%2F</url>
      <content type="text"><![CDATA[PKI标准规范梳理PKI标准可以分为第一代和第二代标准。 第一代PKI标准主要包括美国RSA公司的公钥加密标准（Public Key Cryptography Standards，PKCS）系列国际电信联盟的ITU-T X.509、IETF组织的公钥基础设施X.509（Public Key Infrastructure X.509，PKIX）标准系列无线应用协议（Wireless Application Protocol ,WAP）论坛的无线公钥基础设施（Wireless Public Key Infrastructure，WPKI）标准等。第一代PKI标准主要是基于抽象语法符号（Abstract Syntax Notation One，ASN.1）编码的，实现比较困难，这也在一定程度上影响了标准的推广。 PKCS(Public Key Cryptography Standards)系列标准PKCS是由美国RSA数据安全公司及其合作伙伴制定的一组公钥密码学标准，其中包括证书申请、证书更新、证书作废表发布、扩展证书内容以及数字签名、数字信封的格式等方面的一系列相关协议。到1999年底，PKCS已经公布了以下标准：PKCS#1：定义RSA公开密钥算法加密和签名机制，主要用于组织PKCS#7中所描述的数字签名和数字信封。https://tools.ietf.org/html/rfc2313.htmlPKCS#3：定义Diffie-Hellman密钥交换协议。PKCS#5：描述一种利用从口令派生出来的安全密钥加密字符串的方法。使用MD2或MD5从口令中派生密钥，并采用DES-CBC模式加密。主要用于加密从一个计算机传送到另一个计算机的私人密钥，不能用于加密消息。PKCS#6：描述了公钥证书的标准语法，主要描述X.509证书的扩展格式。PKCS#7：定义一种通用的消息语法，包括数字签名和加密等用于增强的加密机制，PKCS#7与PEM兼容，所以不需其他密码操作，就可以将加密的消息转换成PEM消息。https://tools.ietf.org/html/rfc2315PKCS#8：描述私有密钥信息格式，该信息包括公开密钥算法的私有密钥以及可选的属性集等。PKCS#9：定义一些用于PKCS#6证书扩展、PKCS#7数字签名和PKCS#8私钥加密信息的属性类型。PKCS#10：描述证书请求语法。PKCS#11：称为Cyptoki，定义了一套独立于技术的程序设计接口，用于智能卡和PCMCIA卡之类的加密设备。PKCS#12：描述个人信息交换语法标准。描述了将用户公钥、私钥、证书和其他相关信息打包的语法。https://tools.ietf.org/html/rfc7292PKCS#13：椭圆曲线密码体制标准。PKCS#14：伪随机数生成标准。PKCS#15：密码令牌信息格式标准。 X.509是由国际电信联盟（ITU-T）制定的数字证书标准。在X.500确保用户名称惟一性的基础上，X.509为X.500用户名称提供了通信实体的鉴别机制，并规定了实体鉴别过程中广泛适用的证书语法和数据接口。X.509证书由用户公共密钥和用户标识符组成。此外还包括版本号、证书序列号、CA标识符、签名算法标识、签发者名称、证书有效期等信息。这一标准的最新版本是X.509 v3，它定义了包含扩展信息的数字证书。该版数字证书提供了一个扩展信息字段，用来提供更多的灵活性及特殊应用环境下所需的信息传送。https://www.ietf.org/rfc/rfc5280.txt 第二代PKI标准在2001年，由微软、VeriSign和webMethods三家公司发布了XML密钥管理规范(XML Key Management Specification，XKMS)。 规范应用CER,PEM,DER,CRT,PFX,CRS等编码格式同样的X.509证书,可能有不同的编码格式,目前有以下两种编码格式. PEM - Privacy Enhanced Mail,打开看文本格式,以”—–BEGIN…”开头, “—–END…”结尾,内容是BASE64编码.查看PEM格式证书的信息: 1openssl x509 -in certificate.pem -text -noout Apache和*NIX服务器偏向于使用这种编码格式. DER - Distinguished Encoding Rules,打开看是二进制格式,不可读.查看DER格式证书的信息: 1openssl x509 -in certificate.der -inform der -text -noout Java和Windows服务器偏向于使用这种编码格式. 相关的文件扩展名这是比较误导人的地方,虽然我们已经知道有PEM和DER这两种编码格式,但文件扩展名并不一定就叫”PEM”或者”DER”,常见的扩展名除了PEM和DER还有以下这些,它们除了编码格式可能不同之外,内容也有差别,但大多数都能相互转换编码格式. CRT - CRT应该是certificate的三个字母,其实还是证书的意思,常见于*NIX系统,有可能是PEM编码,也有可能是DER编码,大多数应该是PEM编码,相信你已经知道怎么辨别. CER - 还是certificate,还是证书,常见于Windows系统,同样的,可能是PEM编码,也可能是DER编码,大多数应该是DER编码. KEY - 通常用来存放一个公钥或者私钥,并非X.509证书,编码同样的,可能是PEM,也可能是DER. 查看KEY的办法: 1openssl rsa -in mykey.key -text -noout 如果是DER格式的话,同理应该这样了: 1openssl rsa -in mykey.key -text -noout -inform der CSR - Certificate Signing Request,即证书签名请求,这个并不是证书,而是向权威证书颁发机构获得签名证书的申请,其核心内容是一个公钥(当然还附带了一些别的信息),在生成这个申请的时候,同时也会生成一个私钥,私钥要自己保管好。查看的办法(如果是DER格式的话照旧加上-inform der,这里不写了)： 1openssl req -noout -text -in my.csr PFX/P12 - predecessor of PKCS#12,对nix服务器来说,一般CRT和KEY是分开存放在不同文件中的,但Windows的IIS则将它们存在一个PFX文件中,(因此这个文件包含了证书及私钥)这样会不会不安全？应该不会,PFX通常会有一个”*提取密码“,你想把里面的东西读取出来的话,它就要求你提供提取密码,PFX使用的时DER编码,如何把PFX转换为PEM编码？ 1openssl pkcs12 -in for-iis.pfx -out for-iis.pem -nodes 这个时候会提示你输入提取代码. for-iis.pem就是可读的文本. 生成pfx的命令类似这样: 1openssl pkcs12 -export -in certificate.crt -inkey privateKey.key -out certificate.pfx -certfile CACert.crt 其中CACert.crt是CA(权威证书颁发机构)的根证书,有的话也通过-certfile参数一起带进去.这么看来,PFX其实是个证书密钥库. JKS - 即Java Key Storage,这是Java的专利,跟OpenSSL关系不大,利用Java的一个叫”keytool”的工具,可以将PFX转为JKS,当然了,keytool也能直接生成JKS,不过在此就不多表了. 证书编码的转换 PEM转为DER 1openssl x509 -in cert.crt -outform der -out cert.der DER转为PEM 1openssl x509 -in cert.crt -inform der -outform pem -out cert.pem (提示:要转换KEY文件也类似,只不过把x509换成rsa,要转CSR的话,把x509换成req…) 获得证书 向权威证书颁发机构申请证书 把csr交给权威证书颁发机构,权威证书颁发机构对此进行签名,完成.保留好csr,当权威证书颁发机构颁发的证书过期的时候,你还可以用同样的csr来申请新的证书,key保持不变. 用这命令生成一个csr: 1openssl req -newkey rsa:2048 -new -nodes -keyout my.key -out my.csr 生成自签名的证书 在生成证书的过程中会要你填一堆的东西,其实真正要填的只有Common Name,通常填写你服务器的域名,如”yourcompany.com”,或者你服务器的IP地址,其它都可以留空的. 1openssl req -newkey rsa:2048 -new -nodes -x509 -days 3650 -keyout key.pem -out cert.pem 生产环境中还是不要使用自签的证书,否则浏览器会不认,或者如果你是企业应用的话能够强制让用户的浏览器接受你的自签证书也行.向权威机构要证书通常是要钱的,但现在也有免费的,仅仅需要一个简单的域名验证即可.]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[SSL原理及openssl模拟]]></title>
      <url>%2FNoWorry%2F2017%2F04%2F19%2FHTTPS%2F</url>
      <content type="text"><![CDATA[参考文档 openssl 文档 https://www.openssl.org/docs/man1.0.2/apps/ SSL交互图SSL握手包含3大阶段 协定算法套件 互相验证身份 协定加密机制 SSL协议的客户端服务器连接握手过程大致如下： 客户端发送一个「ClientHello」消息，说明它支持的密码算法列表以及最高协议版本等必要的信息 服务器返回支持的SSL版本，加密算法列表，以及自己的证书等。如果客户端请求的资源需要认证，服务器请求客户端发送证书。 客户端首先验证服务器，如果认证失败，则断开连接，认证成功则执行下一步； 客户端发送pre-master secret(S)（用服务器的公钥加密）和自己的证书（如果服务器需要验证身份） 服务器验证客户端，用自己的私钥得到pre-master secret，然后经过一系列步骤生成master secret(K)。 客户端和服务器使用master secret生成对称密钥session key，之后传输的收据均使用session key(SS)加密解密。 客户端发送消息声明之后的数据用session key加密，并发送一条加密数据表明握手结束 服务器发送消息声明之后的数据用session key加密，并发送一条加密数据表明握手结束S-&gt;K-&gt;SS 一系列技术就不展开了！（自己也没有搞明白） 算法套件（the cipher suites） 123$ openssl ciphers -V -tls1|grep &quot;Enc=AESGCM(256)&quot; 0xC0,0x30 - ECDHE-RSA-AES256-GCM-SHA384 TLSv1.2 Kx=ECDH Au=RSA Enc=AESGCM(256) Mac=AEAD 0x00,0x9D - AES256-GCM-SHA384 TLSv1.2 Kx=RSA Au=RSA Enc=AESGCM(256) Mac=AEAD Kx：密钥协商交互算法Au : 身份认证算法Enc：加密算法（用于数据传输）Mac: 消息指纹（用于保证数据完整性） openssl调试12$ openssl versionOpenSSL 1.0.2h 3 May 2016 ##查看本地可以用算法套件查看本地可用TLS1.0 TLS1.1 TLS1.2的算法套件 grep 加密算法为AELSGCM(256)的所以算法 1$ openssl ciphers -V -tls1|grep &quot;Enc=AESGCM(256)&quot; openssl s_server 模拟https web server12345#创建密钥对openssl req -x509 -newkey rsa:2048 -keyout key.pem -out cert.pem -days 365 -nodes#启动HTTPS serveropenssl s_server -key key.pem -cert cert.pem -cipher &apos;ECDHE-RSA-AES256-GCM-SHA384&apos; -accept 443 -www openssl s_client 模拟 HTTPS client 指定算法套件1$ openssl s_client -cipher &apos;ECDHE-RSA-AES128-GCM-SHA256&apos; -connect 127.0.0.1:443 curl 调试HTTPS123456789101112131415161718192021222324252627282930#模拟握手异常$ curl -vvv --tlsv1.2 --ciphers &apos;AES256-GCM-SHA384&apos; https://localhost* Rebuilt URL to: https://localhost/* timeout on name lookup is not supported* Trying ::1... % Total % Received % Xferd Average Speed Time Time Time Current Dload Upload Total Spent Left Speed 0 0 0 0 0 0 0 0 --:--:-- --:--:-- --:--:-- 0* Trying 127.0.0.1...* Connected to localhost (127.0.0.1) port 443 (#0)* ALPN, offering h2* ALPN, offering http/1.1* Cipher selection: AES256-GCM-SHA384* successfully set certificate verify locations:* CAfile: C:/Program Files/Git/mingw64/ssl/certs/ca-bundle.crt CApath: none* TLSv1.2 (OUT), TLS header, Certificate Status (22):&#125; [5 bytes data]* TLSv1.2 (OUT), TLS handshake, Client hello (1):&#125; [130 bytes data]* TLSv1.2 (IN), TLS header, Unknown (21):&#123; [5 bytes data]* TLSv1.2 (IN), TLS alert, Server hello (2):&#123; [2 bytes data]* error:14077410:SSL routines:SSL23_GET_SERVER_HELLO:sslv3 alert handshake failure 0 0 0 0 0 0 0 0 --:--:-- --:--:-- --:--:-- 0* Closing connection 0curl: (35) error:14077410:SSL routines:SSL23_GET_SERVER_HELLO:sslv3 alert handshake failure#正常连接curl -vvv --tlsv1.2 --ciphers &apos;ECDHE-RSA-AES128-GCM-SHA256&apos; https://localhost]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Hexo GitHub blog搭建]]></title>
      <url>%2FNoWorry%2F2017%2F04%2F17%2F20170417%2F</url>
      <content type="text"><![CDATA[#ssh生产绑定1ssh-keygen -t rsa -b 4096 -C &quot;kevin24067@gmail.com&quot; 1eval $(ssh-agent -s) 1ssh-add ~/.ssh/id_rsa 1clip &lt; ~/.ssh/id_rsa.pub #安装插件1npm install hexo-deployer-git --save 1git config --global core.autocrlf false 1npm install hexo-generator-feed --save 1npm install -- save-dev hexo-util 1npm install hexo-generator-searchdb --save #创建博客123456hexo inithexo new post &quot;&quot;hexo ghexo shexo dhexo clean ##刪除文章 至 \source_posts 底下找到要刪除的文章，並刪除在 Hexo 的 Node Cmd 中執行 1hexo clean 刪掉根目錄下的 db.json 在 Hexo 的 Node Cmd 中執行 1hexo g 在 Hexo 的 Node Cmd 中執行1hexo d]]></content>
    </entry>

    
  
  
</search>
