<?xml version="1.0" encoding="utf-8"?>
<search>
  
    
    <entry>
      <title><![CDATA[SSL原理及openssl模拟]]></title>
      <url>%2FNoWorry%2F2017%2F04%2F19%2FHTTPS%2F</url>
      <content type="text"><![CDATA[参考文档 openssl 文档 https://www.openssl.org/docs/man1.0.2/apps/ SSL交互图SSL握手包含3大阶段 协定算法套件 互相验证身份 协定加密机制 SSL协议的客户端服务器连接握手过程大致如下： 客户端发送一个「ClientHello」消息，说明它支持的密码算法列表以及最高协议版本等必要的信息 服务器返回支持的SSL版本，加密算法列表，以及自己的证书等。如果客户端请求的资源需要认证，服务器请求客户端发送证书。 客户端首先验证服务器，如果认证失败，则断开连接，认证成功则执行下一步； 客户端发送pre-master secret(S)（用服务器的公钥加密）和自己的证书（如果服务器需要验证身份） 服务器验证客户端，用自己的私钥得到pre-master secret，然后经过一系列步骤生成master secret(K)。 客户端和服务器使用master secret生成对称密钥session key，之后传输的收据均使用session key(SS)加密解密。 客户端发送消息声明之后的数据用session key加密，并发送一条加密数据表明握手结束 服务器发送消息声明之后的数据用session key加密，并发送一条加密数据表明握手结束S-&gt;K-&gt;SS 一系列技术就不展开了！（自己也没有搞明白） 算法套件（the cipher suites） 123$ openssl ciphers -V -tls1|grep &quot;Enc=AESGCM(256)&quot; 0xC0,0x30 - ECDHE-RSA-AES256-GCM-SHA384 TLSv1.2 Kx=ECDH Au=RSA Enc=AESGCM(256) Mac=AEAD 0x00,0x9D - AES256-GCM-SHA384 TLSv1.2 Kx=RSA Au=RSA Enc=AESGCM(256) Mac=AEAD Kx：密钥协商交互算法Au : 身份认证算法Enc：加密算法（用于数据传输）Mac: 消息指纹（用于保证数据完整性） openssl调试12$ openssl versionOpenSSL 1.0.2h 3 May 2016 ##查看本地可以用算法套件查看本地可用TLS1.0 TLS1.1 TLS1.2的算法套件 grep 加密算法为AELSGCM(256)的所以算法 1$ openssl ciphers -V -tls1|grep &quot;Enc=AESGCM(256)&quot; openssl s_server 模拟https web server12345#创建密钥对openssl req -x509 -newkey rsa:2048 -keyout key.pem -out cert.pem -days 365 -nodes#启动HTTPS serveropenssl s_server -key key.pem -cert cert.pem -cipher &apos;ECDHE-RSA-AES256-GCM-SHA384&apos; -accept 443 -www openssl s_client 模拟 HTTPS client 指定算法套件1$ openssl s_client -cipher &apos;ECDHE-RSA-AES128-GCM-SHA256&apos; -connect 127.0.0.1:443 curl 调试HTTPS123456789101112131415161718192021222324252627282930#模拟握手异常$ curl -vvv --tlsv1.2 --ciphers &apos;AES256-GCM-SHA384&apos; https://localhost* Rebuilt URL to: https://localhost/* timeout on name lookup is not supported* Trying ::1... % Total % Received % Xferd Average Speed Time Time Time Current Dload Upload Total Spent Left Speed 0 0 0 0 0 0 0 0 --:--:-- --:--:-- --:--:-- 0* Trying 127.0.0.1...* Connected to localhost (127.0.0.1) port 443 (#0)* ALPN, offering h2* ALPN, offering http/1.1* Cipher selection: AES256-GCM-SHA384* successfully set certificate verify locations:* CAfile: C:/Program Files/Git/mingw64/ssl/certs/ca-bundle.crt CApath: none* TLSv1.2 (OUT), TLS header, Certificate Status (22):&#125; [5 bytes data]* TLSv1.2 (OUT), TLS handshake, Client hello (1):&#125; [130 bytes data]* TLSv1.2 (IN), TLS header, Unknown (21):&#123; [5 bytes data]* TLSv1.2 (IN), TLS alert, Server hello (2):&#123; [2 bytes data]* error:14077410:SSL routines:SSL23_GET_SERVER_HELLO:sslv3 alert handshake failure 0 0 0 0 0 0 0 0 --:--:-- --:--:-- --:--:-- 0* Closing connection 0curl: (35) error:14077410:SSL routines:SSL23_GET_SERVER_HELLO:sslv3 alert handshake failure#正常连接curl -vvv --tlsv1.2 --ciphers &apos;ECDHE-RSA-AES128-GCM-SHA256&apos; https://localhost]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Hexo GitHub blog搭建]]></title>
      <url>%2FNoWorry%2F2017%2F04%2F17%2F20170417%2F</url>
      <content type="text"><![CDATA[#ssh生产绑定1ssh-keygen -t rsa -b 4096 -C &quot;kevin24067@gmail.com&quot; 1eval $(ssh-agent -s) 1ssh-add ~/.ssh/id_rsa 1clip &lt; ~/.ssh/id_rsa.pub #安装插件1npm install hexo-deployer-git --save 1git config --global core.autocrlf false 1npm install hexo-generator-feed --save 1npm install -- save-dev hexo-util 1npm install hexo-generator-searchdb --save #创建博客123456hexo inithexo new post &quot;&quot;hexo ghexo shexo dhexo clean ##刪除文章 至 \source_posts 底下找到要刪除的文章，並刪除在 Hexo 的 Node Cmd 中執行 1hexo clean 刪掉根目錄下的 db.json 在 Hexo 的 Node Cmd 中執行 1hexo g 在 Hexo 的 Node Cmd 中執行1hexo d]]></content>
    </entry>

    
  
  
</search>
